{"version":3,"sources":["axios/api.js","action/userAction.js","selector/user.js","pages/Homepage/PannelView/index.js","components/ProgressBar/ProgressBarView.js","components/Upload/UploadPannel.js","constant/imageUrl.js","constant/config.js","model/fact.js","components/Generate/Components/ButtonBox/ButtonBoxView.js","components/Generate/Components/Spining/SpiningView.js","components/Generate/Components/commonSlot/CommonSlotView.js","components/Generate/ToFactsheet/ToFactsheet.js","constant/Color.js","components/Generate/GeneratePannel.js","pages/Homepage/PannelView/PannelView.js","axios/config.js"],"names":["uploadData","formData","Promise","reslove","reject","axios","method","url","config","data","then","response","status","catch","error","uploadVideo","generate","share","uuid","generatePDF","param","updateUserInfo","userInfo","type","ActionType","UPDATE_USER_INFO","updateOperation","operateState","UPDATE_USER_OPERATION","updateCovertType","convertType","UPDATE_CONVERT_TYPE","state","user","isLogin","getUserInfo","Cookies","get","JSON","parse","username","uid","connect","dispatch","userAction","PannelView","ProgressBarView","this","props","percent","isActive","showInfo","strokeColor","style","position","top","zIndex","display","React","Component","Dragger","UploadPannel","originFileOb","dataIndex","errorMessage","initDone","intl","uploadDataToCloud","api","setState","OperationType","JSONUPLOADED","getDataIndex","FAILED","options","currentLocale","message_zh","message_en","fail","uploadVideoToCloud","history","push","pathname","processData","schema","file_url","file_name","fields","fileURL","uploadDataPrefix","fileName","numericalFields","numerical","filter","d","map","field","_that","d3","forEach","i","key","indexOf","parseFloat","console","log","onUploadChange","info","UPLOADIND","BEFORE_UPLOAD","JSONUPLOADING","event","updateProgress","total","loaded","file","fileObj","originFileObj","FormData","append","beforeUpload","resolve","getPannelClassName","UPLOADED","isShowProgressbar","GENERATING","PannelContentView","UploadTxtView","generateProgress","ClickToUploadView","className","FILE_LARGE","height","flex","onChange","showUploadList","accept","AliCloud","ConvertForms","name","ConvertType","FACTSHEET","iconUrl","generateIconUrl","Fact","measure","subspace","groupby","focus","parameter","chart","score","information","significance","script","generatedScript","aggregated","aggregatedFact","compoundType","compoundChart","ButtonBoxView","text","onClick","onClickListener","backgroundImage","SpiningView","isSpining","tip","spinning","CommonSlotView","columnCount","form","pdfName","split","FileTypeAndNameView","justifyContent","marginBottom","myClassName","children","padding","href","target","rel","ToFactsheet","isDownloading","download","reUpload","reGnerate","editPage","click","supportedButton","length","button","index","GREEN","YELLOW","BLUE","GRAY","BAR_BACK","BAR","BAR_HIGHTLIGHT","AREA","LINE","BG_ABOVE","BG_BELOW","CONVERT","GeneratePannel","convertingType","timer","setInterval","count","clearInterval","GENERATED","max_iteration","storyParameter","max_story_length","maxStoryLength","clickGenerate","typeForm","facts","story","tempFacts","factDict","fact","generateStory","slice","nextProps","ConvertingArrow","FileNameView","Math","ceil","idx","backgroundColor","Color","visibility","PUBLISHED","GeneratedPannel","Loading","width","marginTop","flexDirection","alignItems","fallback","handleGetDataIndex","applicationUrl","urlPrefix","generationUrlPrefix","activitiesPrefix","accountIp","publicPrefix","loginadmintest","loginRedirectUrl","logoutRedirectUrl","authenUrl","accessToken","userImage","checkToken","logout","logoutAuthSystem","users","activitiesApi","fetch","factScoring"],"mappings":"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","file":"static/js/9.2e8f342a.chunk.js","sourcesContent":["// import config from '@/axios/config';\r\nimport config from '../axios/config';\r\nimport axios from 'axios';\r\n\r\nexport async function uploadData(formData) {\r\n    return new Promise((reslove, reject) => {\r\n        axios({\r\n            method: \"post\",\r\n            url: `${config.url.uploadData}`,\r\n            config: {\r\n                \"headers\": {\r\n                    'Content-Type': 'multipart/form-data' //application/json; charset=utf-8\r\n                },\r\n            },\r\n            data: formData\r\n        }).then((response) => {\r\n            if (response.status >= 400) {\r\n                reject();\r\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\r\n                reslove(response.data);\r\n            } else {\r\n                reject();\r\n            }\r\n        }).catch(error => {\r\n            reject();\r\n            //  message.error('error message');\r\n        })\r\n    })\r\n}\r\n\r\nexport async function uploadVideo(formData) {\r\n    return new Promise((reslove, reject) => {\r\n        axios({\r\n            method: \"post\",\r\n            url: `${config.url.uploadVideo}`,\r\n            config: {\r\n                \"headers\": {\r\n                    'Content-Type': 'multipart/form-data' //application/json; charset=utf-8\r\n                },\r\n            },\r\n            data: formData\r\n        }).then((response) => {\r\n            if (response.status >= 400) {\r\n                reject();\r\n            } else if (response.status === 200 || response.status === 201 || response.status === 204) {\r\n                reslove(response.data);\r\n            } else {\r\n                reject();\r\n            }\r\n        }).catch(error => {\r\n            reject();\r\n            //  message.error('error message');\r\n        })\r\n    })\r\n}\r\n\r\n\r\nexport function generate(url, data) {\r\n    return axios({\r\n        method: \"post\",\r\n        url: url,\r\n        config: {\r\n            \"headers\": {\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            },\r\n        },\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function factScoring(filename, fact, method) {\r\n    return axios({\r\n        \"method\": \"POST\",\r\n        \"url\": config.url.factScoring,\r\n        \"headers\": {\r\n            \"Content-Type\": \"application/json; charset=utf-8\"\r\n        },\r\n        \"data\": {\r\n            \"file_name\": filename,\r\n            \"fact\": fact,\r\n            \"method\": method,\r\n        }\r\n    })\r\n}\r\n\r\nexport async function fetchStory(id) {\r\n    return axios({\r\n        method: \"get\",\r\n        \"url\": `${config.url.fetch}/${id}.json`,\r\n        config: {\r\n            \"headers\": {\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nexport async function share(uuid) {\r\n    return axios({\r\n        method: \"post\",\r\n        url: `${config.url.share}`,\r\n        config: {\r\n            \"headers\": {\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n            },\r\n        },\r\n        data: {\r\n            \"uuid\": uuid\r\n        }\r\n    })\r\n}\r\n\r\n/*****\r\n *技术栈：\r\n ssr(后端渲染)，koa(koa-views)：模板渲染，渲染出要生成pdf的页面)\r\n node.js 生成pdf插件 puppeteer：将渲染的页面生成PDF\r\n koa-send：将生成的PDF返回给前端页面下载 \r\n * \r\n data是后端用于渲染页面的数据\r\n */\r\nexport function generatePDF(data) {\r\n    return axios({\r\n        method: 'post',\r\n        url: `/generatePDF`,\r\n        param: {},\r\n        data: data\r\n    })\r\n}\r\n","import ActionType from './type';\r\n\r\n\r\nexport const updateUserInfo = (userInfo) => ({\r\n    type: ActionType.UPDATE_USER_INFO,\r\n    userInfo\r\n})\r\n\r\nexport const updateOperation = (operateState) => ({\r\n    type: ActionType.UPDATE_USER_OPERATION,\r\n    operateState\r\n})\r\n\r\nexport const updateCovertType = (convertType) => ({\r\n    type: ActionType.UPDATE_CONVERT_TYPE,\r\n    convertType\r\n})\r\n\r\nexport const updateLocale = (currentLocale) => ({\r\n    type: ActionType.UPDATE_LOCALE,\r\n    currentLocale\r\n})","//import { createSelector } from 'reselect';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport const operateState = state => state.user.operateState;\r\nexport const isLogin = state => state.user.isLogin;\r\nexport const convertType = state => state.user.convertType;\r\nexport const currentLocale = state => state.user.currentLocale;\r\n\r\nexport const getUserInfo = state => {\r\n    return Cookies.get(\"userInfo\") && JSON.parse(Cookies.get(\"userInfo\")) ? JSON.parse(Cookies.get(\"userInfo\")) : {\r\n        username: \"\",\r\n        uid: -1\r\n    }\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\n// import { operateState } from '@/selector/user';\r\n// import * as userAction from '@/action/userAction';\r\nimport { operateState } from '../../../selector/user';\r\nimport * as userAction from '../../../action/userAction';\r\n\r\nimport PannelView from './PannelView';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    operateState: operateState(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateOperation: (operateState) => dispatch(userAction.updateOperation(operateState)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PannelView);\r\n","import React from 'react';\r\nimport { Progress } from \"antd\";\r\n\r\nexport default class ProgressBarView extends React.Component {\r\n\r\n    render() {\r\n        const { percent, isActive } = this.props\r\n        return (<Progress\r\n            percent={percent}\r\n            status={isActive ? \"active\" : \"\"}\r\n            showInfo={false}\r\n            strokeColor=\"#EB6331\"\r\n            style={{\r\n                position: \"absolute\", top: \"-10px\", zIndex: \"9999\",\r\n                display: isActive ? \"block\" : \"none\"\r\n            }} />)\r\n    }\r\n}","import React from 'react';\r\nimport { Upload } from 'antd';\r\n// import ProgressBarView from '@/components/ProgressBar/ProgressBarView'\r\n// import OperationType from '@/constant/OperationType'\r\n// import config from '@/axios/config';\r\n// import * as api from '@/axios/api';\r\nimport ProgressBarView from '../../components/ProgressBar/ProgressBarView'\r\nimport OperationType from '../../constant/OperationType'\r\nimport config from '../../axios/config';\r\nimport * as api from '../../axios/api';\r\nimport * as d3 from 'd3';\r\n\r\nimport \"./UploadPannel.less\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nexport default class UploadPannel extends React.Component {\r\n    state = {\r\n        originFileOb: {},\r\n        dataIndex: 0,\r\n        operateState: this.props.operateState,\r\n        errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\r\n    }\r\n    \r\n\r\n    uploadDataToCloud = (formData) => {\r\n        return new Promise((reslove, reject) => {\r\n            api.uploadData(formData, config.url.uploadData).then((response) => {\r\n                // this.setState({ operateState: OperationType.GENERATING }); //加快页面交互的响应\r\n                this.setState({ operateState: OperationType.JSONUPLOADED }); //加快页面交互的响应\r\n                const { operateState } = this.state;\r\n                this.setState({ dataIndex: response.uuid})\r\n                this.props.getDataIndex(response.uuid)\r\n                if (response.status === 'error') {\r\n                    let { intl } = this.props\r\n                    this.setState({\r\n                        operateState: OperationType.FAILED,\r\n                        errorMessage: intl.options.currentLocale === 'zh-CN' ? response.message_zh : response.message_en\r\n                    })\r\n                    reject();\r\n                    return null;\r\n                }\r\n                reslove(response);\r\n            }, fail => {\r\n                this.setState({\r\n                    operateState: OperationType.FAILED,\r\n                    errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\r\n                })\r\n                reject();\r\n            })\r\n        })\r\n    }\r\n\r\n    uploadVideoToCloud = (formData) => {\r\n        return new Promise((reslove, reject) => {\r\n            api.uploadVideo(formData, config.url.uploadVideo).then((response) => {\r\n                // this.setState({ operateState: OperationType.GENERATING }); //加快页面交互的响应\r\n                const { dataIndex } = this.state;\r\n                // this.props.history.push('/show')\r\n                this.props.history.push({\r\n                    pathname: '/show',\r\n                    dataIndex: dataIndex\r\n                })\r\n                if (response.status === 'error') {\r\n                    let { intl } = this.props\r\n                    this.setState({\r\n                        operateState: OperationType.FAILED,\r\n                        errorMessage: intl.options.currentLocale === 'zh-CN' ? response.message_zh : response.message_en\r\n                    })\r\n                    reject();\r\n                    return null;\r\n                }\r\n                reslove(response);\r\n            }, fail => {\r\n                this.setState({\r\n                    operateState: OperationType.FAILED,\r\n                    errorMessage: this.props.initDone && this.props.intl.get(\"upload failed\")\r\n                })\r\n                reject();\r\n            })\r\n        })\r\n    }\r\n\r\n    processData = (response) => {\r\n        if (!response.schema || !response.file_url || !response.file_name) {\r\n            // this.props.updateOperation(OperationType.UPLOADED)//更新UI\r\n            const { operateState } = this.state;\r\n            if(operateState === OperationType.JSONUPLOADED){\r\n                this.props.updateOperation(OperationType.JSONUPLOADED)//更新UI\r\n                this.setState({\r\n                    operateState: OperationType.JSONUPLOADED,\r\n                })\r\n            }\r\n            else{\r\n                // this.props.updateOperation(OperationType.UPLOADED)//更新UI\r\n                // this.setState({\r\n                //     operateState: OperationType.UPLOADED,\r\n                // })\r\n                // this.props.updateOperation(OperationType.GENERATING)//更新UI\r\n                // this.setState({\r\n                //     operateState: OperationType.GENERATING,\r\n                // })\r\n                this.props.history.push('/show')\r\n            }\r\n            // this.props.updateOperation(OperationType.JSONUPLOADED)//更新UI\r\n            return\r\n        }\r\n        let schema = response.schema.fields\r\n        let fileURL = config.url.uploadDataPrefix + response.file_url\r\n        let fileName = response.file_name\r\n        let numericalFields = []\r\n        let numerical = schema.filter(d => d.type === \"numerical\")\r\n        numericalFields = numerical.map(d => d.field)\r\n        let _that = this\r\n        d3.csv(fileURL)\r\n            .then(function (data) {\r\n                data.forEach((d, i) => {\r\n                    for (let key in d) {\r\n                        if (numericalFields.indexOf(key) !== -1) {\r\n                            d[key] = parseFloat(d[key])\r\n                        }\r\n                    }\r\n                })\r\n                _that.props.uploadData(fileName, schema, data); //更新数据到redux中\r\n                // _that.props.updateOperation(OperationType.UPLOADED)//更新UI\r\n                // _that.props.updateOperation(OperationType.GENERATING)//更新UI\r\n                this.props.history.push('/show')\r\n            }).catch(function (error) {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    onUploadChange = (info) => {\r\n        /**** update UI ****/\r\n        const { operateState } = this.state;\r\n        if(operateState === OperationType.JSONUPLOADED){\r\n            this.setState({\r\n                operateState: OperationType.UPLOADIND,\r\n            })\r\n        }\r\n        if(operateState === OperationType.BEFORE_UPLOAD){\r\n            this.setState({\r\n                operateState: OperationType.JSONUPLOADING,\r\n            })\r\n        }\r\n        // this.setState({\r\n        //     operateState: OperationType.UPLOADIND,\r\n        //     // operateState: OperationType.JSONUPLOADED,\r\n        // })\r\n        if (info.event) {\r\n            this.props.updateProgress(info.event.total, (info.event.total - info.event.loaded));\r\n        }\r\n        /**** update UI  the end ****/\r\n\r\n        const { status } = info.file;\r\n        if (status !== 'uploading') {\r\n            const { dataIndex } = this.state;\r\n            let fileObj = info.file.originFileObj;\r\n            let formData = new FormData();\r\n            formData.append(\"file\", fileObj);\r\n            formData.append(\"uuid\", dataIndex);\r\n            if(operateState === OperationType.JSONUPLOADING){\r\n                //step:1 upload data\r\n                this.uploadDataToCloud(formData)\r\n                    //step 2:process data\r\n                    .then((response) => this.processData(response))\r\n            }\r\n            else if(operateState === OperationType.UPLOADIND){\r\n                //step:1 upload data\r\n                this.uploadVideoToCloud(formData)\r\n                    //step 2:process data\r\n                    .then((response) => this.processData(response))\r\n            }\r\n            else{\r\n                //step:1 upload data\r\n                this.uploadDataToCloud(formData)\r\n                    //step 2:process data\r\n                    .then((response) => this.processData(response))\r\n            }\r\n            // //step:1 upload data\r\n            // this.uploadDataToCloud(formData)\r\n            //     //step 2:process data\r\n            //     .then((response) => this.processData(response))\r\n        }\r\n    }\r\n    beforeUpload = (info) => {\r\n        return new Promise((resolve, reject) => {\r\n            return resolve(true);\r\n            // if (info.size <= 1048576 * 5) {\r\n            //     return resolve(true);\r\n            // } else {\r\n            //     this.setState({\r\n            //         operateState: OperationType.FILE_LARGE\r\n            //     })\r\n            //     reject(false);\r\n            // }\r\n        });\r\n    }\r\n\r\n    getPannelClassName = () => {\r\n        const { operateState } = this.state;\r\n        switch (operateState) {\r\n            case OperationType.BEFORE_UPLOAD:\r\n            case OperationType.JSONUPLOADED:\r\n                return \"draggerPannelCommon yellowPannel\";\r\n            case OperationType.UPLOADED:\r\n                return \"pannelWithConvertType whitePannel\";\r\n\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    isShowProgressbar = () => {\r\n        const { operateState } = this.state;\r\n        if (operateState === OperationType.UPLOADIND || operateState === OperationType.GENERATING) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    render() {\r\n        const { intl, initDone, generateProgress } = this.props;\r\n        const { operateState } = this.state;\r\n\r\n        /***\r\n            上传失败或者文件过大的情况下，点击此按钮可以重新上传\r\n            ***/\r\n        const ClickToUploadView = () => {\r\n            return (\r\n                <div className=\"ClickToUpload\">\r\n                    <div ></div>\r\n                    <p> {initDone && intl.get(\"Click to upload\")}</p>\r\n                </div>\r\n            )\r\n        };\r\n\r\n        let PannelContentView;\r\n        let UploadTxtView;\r\n        switch (operateState) {\r\n            case OperationType.BEFORE_UPLOAD:\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场数据</span></div>\r\n                PannelContentView = <>\r\n                    <div className=\"JSONFileImage\">\r\n                        <div className='jsonIconWhite'></div>\r\n                    </div>\r\n                    <div className=\"uploadView\">\r\n                        <div className=\"uploadBtn\">\r\n                            {/* <div></div> */}\r\n                            上传数据\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                break;\r\n            case OperationType.JSONUPLOADING:\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场数据</span></div>\r\n                PannelContentView = <div className=\"uploading\">\r\n                    <div className='uploadImage'></div>\r\n                    <span>{initDone && intl.get(\"Uploading file\")}</span>\r\n                    <div className='dot'>...</div>\r\n                </div>\r\n                break;\r\n            case OperationType.UPLOADIND:\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场视频</span></div>\r\n                PannelContentView = <div className=\"uploading\">\r\n                    <div className='uploadImage'></div>\r\n                    <span>{initDone && intl.get(\"Uploading file\")}</span>\r\n                    <div className='dot'>...</div>\r\n                </div>\r\n                break;\r\n            case OperationType.JSONUPLOADED:\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场视频</span></div>\r\n                PannelContentView = <>\r\n                    <div className=\"MP4FileImage\">\r\n                        <div className='mp4IconWhite'></div>\r\n                    </div>\r\n                    <div className=\"uploadView\">\r\n                        <div className=\"uploadBtn\">\r\n                            {/* <div></div> */}\r\n                            上传视频\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                break;\r\n            case OperationType.FAILED:\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场数据</span></div>\r\n                PannelContentView = <>\r\n                    <div className='errorFailImage'>\r\n                        <div className=\"iconFailed\"></div>\r\n                        <p className=\"hintText\">{this.state.errorMessage}</p>\r\n                    </div>\r\n                    <ClickToUploadView />\r\n                </>\r\n                break;\r\n            case OperationType.FILE_LARGE: //large than 5MB\r\n                UploadTxtView = <div className='UploadTxtDiv'><div></div> <span>上传赛场数据</span></div>\r\n                PannelContentView = <>\r\n                    <div className=\"largeFileView\">\r\n                        <div></div>\r\n                        <span>{initDone && intl.get(\"larger than 5MB\")}</span>\r\n                    </div>\r\n                    <ClickToUploadView />\r\n                </>\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    { UploadTxtView }\r\n                </div>\r\n                <div className={this.getPannelClassName()} style={{ position: 'relative' }}>\r\n                    <ProgressBarView percent={generateProgress} isActive={this.isShowProgressbar()} />\r\n                    <div style={{ height: \"340px\", flex: 1 }}>\r\n                        <Dragger\r\n                            beforeUpload={this.beforeUpload}\r\n                            onChange={this.onUploadChange}\r\n                            showUploadList={false}\r\n                            accept=\".json, .mp4\">\r\n                            <div className=\"pannelContent\">\r\n                                {\r\n                                    PannelContentView\r\n                                }\r\n                            </div>\r\n                        </Dragger>\r\n                    </div>\r\n                </div >\r\n            </>\r\n        )\r\n    }\r\n}","const AliCloud = 'http://calliope-dev.oss-cn-shanghai.aliyuncs.com/image/images'\r\nexport default AliCloud","import ConvertType from './ConvertType'\r\n// import AliCloud from '@/constant/imageUrl'\r\nimport AliCloud from '../constant/imageUrl'\r\n\r\nlet ConvertForms = [\r\n    {\r\n        name: ConvertType.FACTSHEET,\r\n        iconUrl: `${AliCloud}/convertType/factsheet.png`,\r\n        generateIconUrl: `${AliCloud}/convertType/factsheet_black.png`\r\n    },\r\n    // {\r\n    //     name: ConvertType.H5,\r\n    //     iconUrl: '${AliCloud}/convertType/H5.png',\r\n    //     generateIconUrl: '${AliCloud}/convertType/H5_black.png'\r\n    // }\r\n]\r\nexport default ConvertForms;","// import {genFactSentence,genSubtitle} from '../sentencer';\r\n\r\nexport default class Fact {\r\n    constructor(type, measure = [], subspace = [], groupby = [], focus = [], parameter = [], chart = \"\", score = 0, information = 0, significance = 0) {\r\n        this.type = type;\r\n        this.measure = measure;\r\n        this.subspace = subspace;\r\n        this.groupby = groupby;\r\n        this.focus = focus;\r\n        this.parameter = parameter;\r\n        this.score = score;\r\n        this.information = information;\r\n        this.significance = significance;\r\n        this.chart = chart;\r\n        // this.generatedScript = genFactSentence(this);\r\n        // this.generatedSubtitle = genSubtitle(this)\r\n        // Compound Fact\r\n        this.aggregated = false;\r\n        this.aggregatedFact = null;\r\n        this.compoundType = '';\r\n        this.compoundChart = 'juxtaposition';\r\n    }\r\n    script = () => this.generatedScript;\r\n}","\r\nimport React from 'react'\r\nimport './ButtonBoxView.less'\r\n\r\n\r\nexport default class ButtonBoxView extends React.Component {\r\n\r\n    render() {\r\n        const { iconUrl, text } = this.props\r\n        return <div className='button-box' onClick={() => this.props.onClickListener()}>\r\n            <div style={{ backgroundImage: `url(${iconUrl})` }}></div>\r\n            <p>{text}</p>\r\n        </div>\r\n\r\n    }\r\n}","\r\nimport React from 'react'\r\nimport { Spin } from 'antd';\r\nimport './SpiningView.less'\r\n\r\nexport default class SpiningView extends React.Component {\r\n\r\n    render() {\r\n        const { isSpining, initDone, intl } = this.props\r\n        return <>\r\n            <Spin tip={initDone && intl.get(\"downloading\")} spinning={isSpining} />\r\n        </>\r\n    }\r\n}","\r\nimport React from 'react'\r\nimport SpiningView from '../Spining/SpiningView';\r\nimport './CommonSlotView.less'\r\nimport '../../common.less'\r\n\r\n\r\n/**** 定义组件的外观***/\r\nexport default class CommonSlotView extends React.Component {\r\n    render() {\r\n        const { fileName, initDone, intl, columnCount, form, isSpining } = this.props\r\n        let pdfName = fileName && fileName.split(\".csv\")[0]\r\n\r\n        const FileTypeAndNameView = () => {\r\n            return <div className='fileTypeAndNameView' style={{ justifyContent: isSpining ? \"flex-start\" : \"center\" }}>\r\n                <div className='fileType-icon'></div>\r\n                <span style={{ marginBottom: \"0px\" }} >{form === \"H5\" ? '' : `${pdfName}.pdf`}</span>\r\n            </div>\r\n        }\r\n\r\n        return <div className={this.props.myClassName ? `generated-view-dox ${this.props.myClassName}` : 'generated-view-dox'}>\r\n            <span >{initDone && intl.get(form === \"H5\" ? \"convertedTxtH5\" : \"convertedTxt\")}</span>\r\n            <FileTypeAndNameView />\r\n            <div className=\"FuntionView\" style={{ columnCount }}>\r\n                <div className='download-box'>\r\n                    <SpiningView isSpining={isSpining} {...this.props} />\r\n                </div>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>\r\n            <span >{initDone && intl.get(\"Visit\")}<a style={{ padding: '0px 5px' }} href='https://datacalliope.com' target=\"_blank\" rel=\"noopener noreferrer\">Calliope · Data</a>{initDone && intl.get(\"VisitCalliope\")}</span>\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\n// import ConvertForms from '@/constant/config'\r\n// import OperationType from '@/constant/OperationType'\r\nimport ConvertForms from '../../../constant/config'\r\nimport OperationType from '../../../constant/OperationType'\r\nimport ButtonBoxView from '../Components/ButtonBox/ButtonBoxView'\r\nimport CommonSlotView from '../Components/commonSlot/CommonSlotView'\r\n// import AliCloud from '@/constant/imageUrl'\r\n// import * as api from '@/axios/api'\r\nimport AliCloud from '../../../constant/imageUrl'\r\nimport * as api from '../../../axios/api'\r\nimport './ToFactsheet.less'\r\nimport '../common.less'\r\n\r\n\r\nexport default class ToFactsheet extends React.Component {\r\n\r\n    state = {\r\n        isDownloading: false\r\n    }\r\n\r\n    download = () => {\r\n        this.setState({\r\n            isDownloading: true\r\n        })\r\n        //pdf下载功能\r\n        let data = {\r\n\r\n        }\r\n        api.generatePDF(data).then(() => { })\r\n    }\r\n\r\n    reUpload = () => {\r\n        this.props.updateOperation(OperationType.BEFORE_UPLOAD)\r\n    }\r\n    reGnerate = () => {\r\n        this.props.reGnerate(ConvertForms[0])\r\n    }\r\n    editPage = () => {\r\n        this.props.history.push('/edit/factsheet')\r\n    }\r\n    click = (text) => {\r\n        const { intl, initDone } = this.props;\r\n        switch (text) {\r\n            case initDone && intl.get(\"Upload\"):\r\n                this.reUpload()\r\n                break;\r\n            case initDone && intl.get(\"Regnerate\"):\r\n                this.reGnerate()\r\n                break;\r\n            case initDone && intl.get(\"Download\"):\r\n                this.download()\r\n                break;\r\n            case initDone && intl.get(\"Edit\"):\r\n                this.editPage()\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { intl, initDone, fileName } = this.props;\r\n        const { isDownloading } = this.state\r\n        //add your button here\r\n        const supportedButton = [\r\n            {\r\n                iconUrl: `${AliCloud}/upload_white.png`,\r\n                text: initDone && intl.get(\"Upload\")\r\n            },\r\n            {\r\n                iconUrl: `${AliCloud}/download/regenerate.png`,\r\n                text: initDone && intl.get(\"Regnerate\")\r\n            },\r\n            {\r\n                iconUrl: `${AliCloud}/download/download.png`,\r\n                text: initDone && intl.get(\"Download\")\r\n            },\r\n            {\r\n                iconUrl: `${AliCloud}/download/edit.png`,\r\n                text: initDone && intl.get(\"Edit\")\r\n            }\r\n        ]\r\n        return (\r\n            <CommonSlotView myClassName={\"toFactsheet\"} fileName={fileName} isSpining={isDownloading} columnCount={supportedButton.length} {...this.props}>\r\n                {\r\n                    supportedButton.map((button, index) => {\r\n                        return <ButtonBoxView key={\"index_\" + index} iconUrl={button.iconUrl} text={button.text} onClickListener={() => this.click(button.text)} />\r\n                    })\r\n                }\r\n            </CommonSlotView >\r\n        )\r\n    }\r\n}\r\n","export default {\r\n    GREEN: 'rgb(51, 111, 185)',\r\n    YELLOW: 'yellow',\r\n    BLUE: '#336fb9',\r\n    GRAY: 'lightgray',\r\n    BAR_BACK: '#222f3d',\r\n    BAR: '#6CD4FF',\r\n    BAR_HIGHTLIGHT: '#F6C02A',\r\n    AREA: '#ffce54',\r\n    LINE: '#ffce54',\r\n    BG_ABOVE: '#a1d469',\r\n    BG_BELOW: '#ed5463',\r\n    CONVERT: [\"#064969\", \"#E19788\", \"#D33346\", \"#96A7CE\", \"#B1CC70\", \"#4ECBC4\"]\r\n}","import React, { Suspense } from 'react'\r\nimport { Spin } from 'antd';\r\n// import OperationType from '@/constant/OperationType'\r\n// import ConvertType from '@/constant/ConvertType'\r\n// import ConvertForms from '@/constant/config'\r\n// import Fact from '@/model/fact'\r\n// import ToFactsheet from '@/components/Generate/ToFactsheet/ToFactsheet'\r\n// import Color from '@/constant/Color'\r\n// import ProgressBarView from '@/components/ProgressBar/ProgressBarView'\r\n// import config from '@/axios/config';\r\n// import * as api from '@/axios/api';\r\nimport OperationType from '../../constant/OperationType'\r\nimport ConvertType from '../../constant/ConvertType'\r\nimport ConvertForms from '../../constant/config'\r\nimport Fact from '../../model/fact'\r\nimport ToFactsheet from '../../components/Generate/ToFactsheet/ToFactsheet'\r\nimport Color from '../../constant/Color'\r\nimport ProgressBarView from '../../components/ProgressBar/ProgressBarView'\r\nimport config from '../../axios/config';\r\nimport * as api from '../../axios/api';\r\n\r\nimport './GeneratePannel.less';\r\n\r\n\r\nexport default class GeneratePannel extends React.Component {\r\n\r\n    state = {\r\n        operateState: this.props.operateState,\r\n        convertingType: ConvertForms[0]\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.operateState !== this.props.operateState) {\r\n            this.setState({\r\n                operateState: nextProps.operateState\r\n            })\r\n        }\r\n    }\r\n    generate = (url) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let fileName = this.props.fileName;\r\n            // this.props.generateStory([], [], '');\r\n            // this.props.updateProgress(this.props.maxStoryLength, this.props.maxStoryLength);//reset progress bar\r\n            // //setTimeout 8s\r\n            // let max_iteration = 8,\r\n            //     count = max_iteration;//inital\r\n\r\n            let timer = setInterval(() => {\r\n                if (count === 0) {\r\n                    clearInterval(timer)\r\n                    this.setState({\r\n                        operateState: OperationType.GENERATED\r\n                    })\r\n                    // this.props.history.push('/edit')\r\n                    this.props.history.push('/show')\r\n                }\r\n                count--;\r\n                this.props.updateProgress(max_iteration, count < 0 ? 0 : count);\r\n            }, 1500)\r\n\r\n            const { storyParameter } = this.props;\r\n\r\n            let data = {\r\n                file_name: fileName,\r\n                max_story_length: storyParameter.maxStoryLength\r\n            }\r\n            const response = await api.generate(url, data)\r\n            clearInterval(timer);\r\n            if (response.data.fail) {\r\n                this.setState({\r\n                    operateState: OperationType.FAILED,\r\n                    errorMessage: response.data.fail\r\n                })\r\n                reject();\r\n            }\r\n            if (response.data.error) {\r\n                this.setState({\r\n                    operateState: OperationType.FAILED,\r\n                    errorMessage: response.data.error\r\n                })\r\n                reject();\r\n            }\r\n            this.props.updateProgress(max_iteration, 0);//100%\r\n            this.setState({\r\n                operateState: OperationType.GENERATED\r\n            })\r\n            resolve(response)\r\n        })\r\n    }\r\n\r\n    getPannelClassName = () => {\r\n        const { operateState } = this.state;\r\n        switch (operateState) {\r\n            case OperationType.UPLOADED:\r\n                return \"pannelWithConvertType whitePannel\"\r\n            case OperationType.GENERATING:\r\n            case OperationType.GENERATED:\r\n                return \"draggerPannelCommon whitePannel\"\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    isShowProgressbar = () => {\r\n        const { operateState } = this.state\r\n        if (operateState === OperationType.GENERATING) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGenerate = (typeForm) => {\r\n        this.setState({\r\n            convertingType: typeForm,\r\n            operateState: OperationType.GENERATING\r\n        })\r\n        let type = typeForm.name\r\n        this.generate(config.url.generate).then(response => {\r\n            const facts = response.data.story.facts;\r\n            let tempFacts = [];\r\n            switch (type) {\r\n                default:\r\n                    for (let factDict of facts) {\r\n                        let fact = new Fact(\r\n                            factDict['type'],\r\n                            factDict['measure'],\r\n                            factDict['subspace'],\r\n                            factDict['groupby'],\r\n                            factDict['focus'],\r\n                            factDict['parameter'],\r\n                            \"\", // chart\r\n                            factDict['score'],\r\n                            factDict['information'],\r\n                            factDict['significance']\r\n                        )\r\n                        tempFacts.push(fact);\r\n                    }\r\n                    this.props.generateStory(tempFacts.slice(), [\r\n                        \"none\",\r\n                        \"similarity\",\r\n                        \"similarity\",\r\n                        \"similarity\",\r\n                        \"similarity\",\r\n                        \"similarity\"\r\n                    ], 1);\r\n                    // this.props.history.push('/edit')\r\n                    this.props.history.push('/show')\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { intl, initDone, generateProgress } = this.props;\r\n        const { operateState, convertingType } = this.state\r\n\r\n\r\n        const ConvertingArrow = ({ operateState }) => {\r\n            return (<div className=\"arrowLineDiv\" >\r\n                <p> {this.props.generateProgress + \"%\"}</p>\r\n                <div className=\"arrowLine\"></div>\r\n                {\r\n                    operateState === OperationType.GENERATED ?\r\n                        <p> {initDone && intl.get(\"Success\")}</p>\r\n                        :\r\n                        <p> {initDone && intl.get(\"Coverting\")}</p>\r\n                }\r\n            </div>)\r\n        }\r\n\r\n        const FileNameView = ({ fileName }) => {\r\n            return <div className='CSVFileImage'>\r\n                <div className='csvIconBlack'></div>\r\n                <span className=\"fileName\">{fileName}</span>\r\n            </div>\r\n        }\r\n\r\n        let PannelContentView;\r\n        switch (operateState) {\r\n            case OperationType.UPLOADED:\r\n                PannelContentView = <>\r\n                    <div style={{ height: \"340px\", flex: 1 }}>\r\n                        <div className='pannel-box'>\r\n                            <FileNameView fileName={this.props.fileName} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='ConvertFormsDiv' style={{ columnCount: Math.ceil(ConvertForms.length / 2) }}>\r\n                        {\r\n                            ConvertForms.map((type, idx) => {\r\n                                return <div className='convert-box'\r\n                                    key={idx}\r\n                                    style={{ height: ConvertForms.length === 1 ? \"100%\" : \"50%\", backgroundColor: Color.CONVERT[idx] }}\r\n                                    onClick={() => this.clickGenerate(type)}>\r\n                                    <div className='icon'\r\n                                        style={{ backgroundImage: `url(${type.iconUrl})` }}\r\n                                    />\r\n                                    <span>{initDone && intl.get(`To${type.name}`)}</span>\r\n                                </div>\r\n                            })\r\n                        }\r\n                        {\r\n                            ConvertForms.length !== 1 && ConvertForms.length % 2 !== 0 ?\r\n                                <div style={{ height: \"50%\", visibility: \"none\", backgroundColor: \"transparent\" }}></div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                </>\r\n                break;\r\n            case OperationType.GENERATING:\r\n                PannelContentView = <div style={{ height: \"340px\", flex: 1 }}>\r\n                    <div className='pannel-box'>\r\n                        <div style={{ display: 'flex' }}>\r\n                            {/* <FileNameView fileName={this.props.fileName} /> */}\r\n                            <div className='JSONFileImage'>\r\n                                <div className='jsonIconBlack'></div>\r\n                                <span className=\"fileName\">比赛数据</span>\r\n                            </div>\r\n                            <div className='MP4FileImage'>\r\n                                <div className='mp4IconBlack'></div>\r\n                                <span className=\"fileName\">比赛视频</span>\r\n                            </div>\r\n                            <div className='VHCenter'>\r\n                                <ConvertingArrow operateState={operateState} {...this.props} />\r\n                                <div className='CSVFileImage'>\r\n                                    <div className='GenerateIcon'\r\n                                        style={{ backgroundImage: `url(${convertingType.generateIconUrl})` }}\r\n                                    />\r\n                                    <span className=\"fileName\">比赛快报</span>\r\n                                    {/* <span className='fileName'>{initDone && intl.get(`To${convertingType.name}`)}</span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n                break;\r\n            case OperationType.PUBLISHED:\r\n                const Loading = () => {\r\n                    return (<div style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', marginTop: \"50px\" }}>\r\n                        <Spin />\r\n                    </div>)\r\n                }\r\n                //dynamic load the supported button view according to the convert type\r\n                let GeneratedPannel;\r\n                switch (convertingType.name) {\r\n                    case ConvertType.FACTSHEET:\r\n                        GeneratedPannel = <ToFactsheet reGnerate={this.clickGenerate}  {...this.props} />\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                PannelContentView = <div style={{ height: \"340px\", flex: 1 }}>\r\n                    <div className='pannel-box'>\r\n                        <div style={{ display: 'flex', flexDirection: \"column\", alignItems: \"center\", height: \"100%\" }}>\r\n                            <Suspense fallback={<Loading />}>\r\n                                {GeneratedPannel}\r\n                            </Suspense>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return <div className={this.getPannelClassName()}>\r\n            <ProgressBarView percent={generateProgress} isActive={this.isShowProgressbar()} />\r\n            {\r\n                PannelContentView\r\n            }\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n// import OperationType from '@/constant/OperationType'\r\n\r\n// import UploadPannel from '@/components/Upload/UploadPannel'\r\n// import GeneratePannel from '@/components/Generate/GeneratePannel'\r\nimport OperationType from '../../../constant/OperationType'\r\n\r\nimport UploadPannel from '../../../components/Upload/UploadPannel'\r\nimport GeneratePannel from '../../../components/Generate/GeneratePannel'\r\nimport './PannelView.less'\r\n\r\n/***上传与生成组件****/\r\nexport default class PannelView extends Component {\r\n    handleGetDataIndex = (index) => {\r\n        console.log(\"PannelView uuid index\")\r\n        console.log(index)\r\n        // this.setState({\r\n        //     dataIndex : index\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { intl, initDone, operateState } = this.props;\r\n        let PannelView;\r\n        switch (operateState) {\r\n            //upload module\r\n            case OperationType.BEFORE_UPLOAD:\r\n            case OperationType.UPLOADIND:\r\n            case OperationType.FAILED:\r\n            case OperationType.FILE_LARGE:\r\n            case OperationType.JSONUPLOADED:\r\n                PannelView = <UploadPannel getDataIndex={this.handleGetDataIndex} operateState={operateState} {...this.props} />\r\n                // console.log(\"this.state.dataIndex\")\r\n                // console.log(this.state.dataIndex)\r\n                break;\r\n            //generate module\r\n            case OperationType.UPLOADED:\r\n            case OperationType.GENERATING:\r\n            case OperationType.PUBLISHED:\r\n                PannelView = <GeneratePannel operateState={operateState} {...this.props} />\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return <div>\r\n            {\r\n                PannelView\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","//let calliopeService = 'service.datacalliope.com';\r\nlet calliopeService = 'calliope-service.idvxlab.com';\r\n//let calliopeLiteService = 'calliope-service.idvxlab.com:8004';\r\nlet calliopeLiteService = 'calliope-service.idvxlab.com:8002';\r\n// let applicationUrl='https://datacalliope.com';\r\nlet applicationUrl = 'http://calliope-dev.idvxlab.com';\r\nlet calliopePingpangService = 'pingpong-api.datacalliope.com:8010'\r\n\r\nlet urlPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}:8002/api/v1` : 'http://localhost:7001/api/v1';\r\nlet uploadDataPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopePingpangService}` : 'http://localhost:6008';//todo  7001\r\n// let uploadDataPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeLiteService}` : 'http://localhost:7001';//todo  7001\r\n// let uploadDataPrefix ='https://pingpong-api.datacalliope.com:8010';//todo  7001\r\n// let uploadDataPrefix = `https://${calliopePingpangService}`;//todo  7001\r\nlet generationUrlPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeLiteService}` : 'http://localhost:6010';//todo  7001\r\nlet activitiesPrefix = process.env.NODE_ENV === 'production' ? `https://${calliopeService}:8002/log/v1` : 'http://localhost:7001/log/v1';\r\nlet publicPrefix = process.env.NODE_ENV === 'production' ? applicationUrl : 'http://localhost:3000';\r\n//let client_id = '033338f2-02a8-44d4-8d54-5173b4a864f9';\r\nlet client_id = '6dcd0f8b-6990-4d69-9018-29b3351aa6ff';\r\nlet accountIp = `https://account.datacalliope.com`\r\nlet logoutRedirectUrlIp = `https://service.datacalliope.com:8001`\r\n\r\nconst config = {\r\n    url: {\r\n        applicationUrl: applicationUrl,\r\n        //share\r\n        publicPrefix: publicPrefix,\r\n        //login\r\n        loginadmintest: `${urlPrefix}/loginadmintest`,\r\n        loginRedirectUrl: `${accountIp}/#/login?response_type=code&client_id=${client_id}&grant_type=authorization_code&redirect_uri=${applicationUrl}`,\r\n        logoutRedirectUrl: `${applicationUrl}/#/logout`,\r\n        authenUrl: accountIp,\r\n        accessToken: `${urlPrefix}/accesstoken`,\r\n        userImage: `${logoutRedirectUrlIp}/img`,\r\n        checkToken: `${urlPrefix}/checktoken`,\r\n        //logout\r\n        logout: `${urlPrefix}/logout`,\r\n        logoutAuthSystem: `${logoutRedirectUrlIp}/logout`,\r\n        //activities\r\n        users: `${urlPrefix}/users`,\r\n        activitiesApi: `${activitiesPrefix}/users`,\r\n        //upload\r\n        uploadDataPrefix: uploadDataPrefix,\r\n        uploadData: `${uploadDataPrefix}/upload`,\r\n        uploadVideo: `${uploadDataPrefix}/uploadvideo`,\r\n        share: `${uploadDataPrefix}/share`,\r\n        // public: `${uploadDataPrefix}/public`,\r\n        fetch: `${uploadDataPrefix}/data/share`,\r\n        //story generation\r\n        factScoring: `${generationUrlPrefix}/fact`,\r\n        generate: `${generationUrlPrefix}/generate`,\r\n    }\r\n}\r\nexport default config"],"sourceRoot":""}